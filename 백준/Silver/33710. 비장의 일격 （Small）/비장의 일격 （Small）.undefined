#include <bits/stdc++.h>
using namespace std;

#define FASTIO                 \
  ios::sync_with_stdio(false); \
  cin.tie(nullptr);            \
  cout.tie(nullptr);

#define FOR(i, a, b) for (int i = a; i < b; i += 1)
#define FRE(i, b, a) for (int i = b; i >= a; i -= 1)
#define FOF(it, vec) for (auto& it : vec)
#define endl '\n'
#define ALL(v) v.begin(), v.end()
#define DEBUG_VAR(var) cout << #var << ": " << (var) << endl;
// #define DEBUG

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

int main() {
  FASTIO;
  int N, K;
  string S;
  cin >> N >> K >> S;
  K = min(K, 25);
  int intX = 'X' - 'A';
  vector<vector<int>> indexMap(26);
  FOR(i, 0, N) indexMap[S[i] - 'A'].push_back(i);
  vector<vector<int>> memo(26, vector<int>(K + 1, N));
  vector<vector<int>> dp(N + 1, vector<int>(K + 1, -1));
  FOR(i, 0, K + 1) dp[0][i] = 0;
  FOR(i, 1, N + 1) {
    FOR(j, 0, K + 1) {
      if (dp[i][j] == -1) {
        dp[i][j] = dp[i - 1][j] + 1;
      } else {
        dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);
      }

      if (i == N) continue;

      int charInt = S[i] - 'A';
      bool isX = charInt == intX;

      if (!isX) {
        if (memo[charInt][j] <= dp[i][j]) continue;
        memo[charInt][j] = min(memo[charInt][j], dp[i][j] + N - i);
      }

      if ((j == 0) || isX) continue;
      const vector<int>& indexes = indexMap[charInt];
      FOR(k, 0, indexes.size()) {
        int index = indexes[k];
        if (index >= i) break;
        if (dp[i + 1][j - 1] == -1) {
          dp[i + 1][j - 1] = dp[index][j];
        } else {
          dp[i + 1][j - 1] = min(dp[i + 1][j - 1], dp[index][j]);
        }
      }
    }
  }

  int ans = N + 1;
  FOR(j, 0, K + 1) {
    if (dp[N][j] == -1) continue;
    ans = min(ans, dp[N][j]);
  }

  cout << ans << endl;
}