#include <bits/stdc++.h>
using namespace std;

#define FASTIO                 \
  ios::sync_with_stdio(false); \
  cin.tie(nullptr);            \
  cout.tie(nullptr);

#define FOR(i, a, b) for (int i = a; i < b; i += 1)
#define FRE(i, b, a) for (int i = b; i >= a; i -= 1)
#define FOF(it, vec) for (auto& it : vec)
#define endl '\n'
#define ALL(v) v.begin(), v.end()
#define DEBUG_VAR(var) cout << #var << ": " << (var) << endl;
// #define DEBUG

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

void go(vector<unordered_map<int, vector<int>>>& adj, vector<int>& dists, int N, int M,
        vector<unordered_set<int>>& visited) {
  queue<tuple<int, int, int>> q;
  q.push({1, 0, -1});

  while (!q.empty()) {
    auto [node, dist, prevW] = q.front();
    q.pop();

    if (prevW != -1) {
      if (dists[node] == -1 || dists[node] > dist) {
        dists[node] = dist;
      }
    }

    vector<int> nextWs = {};
    if (prevW == -1) {
      FOF(it, adj[node]) nextWs.push_back(it.first);
    } else {
      nextWs.push_back(prevW + 1);
      nextWs.push_back(prevW - 1);
    }

    FOF(nextW, nextWs) {
      if (nextW < 1 || nextW > M) continue;
      if (visited[node].find(nextW) != visited[node].end()) continue;
      visited[node].insert(nextW);
      vector<int>& nexts = adj[node][nextW];
      FOF(nt, nexts) {
        if (dists[nt] == -1 || dists[nt] > dist + 1) {
          dists[nt] = dist + 1;
        }

        q.push({nt, dist + 1, nextW});
      }
    }
  }
}

int main() {
  FASTIO;
  int N, M;
  cin >> N >> M;
  vector<unordered_map<int, vector<int>>> adj(N + 1);
  FOR(i, 0, M) {
    int u, v, w;
    cin >> u >> v >> w;
    adj[u][w].push_back(v);
    adj[v][w].push_back(u);
  }

  vector<int> dist(N + 1, -1);
  vector<unordered_set<int>> visited(N + 1);
  go(adj, dist, N, M, visited);
  FOR(i, 1, N + 1) cout << dist[i] << " ";

  return 0;
}