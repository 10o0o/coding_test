#include <bits/stdc++.h>
using namespace std;

#define FASTIO                 \
  ios::sync_with_stdio(false); \
  cin.tie(nullptr);            \
  cout.tie(nullptr);

#define FOR(i, a, b) for (int i = a; i < b; i += 1)
#define FRE(i, b, a) for (int i = b; i >= a; i -= 1)
#define FOF(it, vec) for (auto& it : vec)
#define endl '\n'
#define ALL(v) v.begin(), v.end()
#define DEBUG_VAR(var) cout << #var << ": " << (var) << endl;
// #define DEBUG

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

int main() {
  FASTIO;
  int N, K, R;
  cin >> N >> K >> R;
  bool flag = false;
  unordered_set<int> unsatisfiedGroup;
  vector<bool> satisfied(N, false);

  while (R--) {
    vector<int> A(K);
    FOR(i, 0, K) cin >> A[i];
    FOR(i, 0, K) A[i]--;
    string S;
    cin >> S;
    if (S == "unsatisfied") {
      if (!flag) {
        FOR(i, 0, K) { unsatisfiedGroup.insert(A[i]); }
      } else {
        unordered_set<int> temp;
        FOR(i, 0, K) if (unsatisfiedGroup.count(A[i])) temp.insert(A[i]);
        unsatisfiedGroup = temp;
      }
      flag = true;
    } else {
      FOR(i, 0, K) satisfied[A[i]] = true;
    }
  }

  int remainCounts = 0;
  if (!flag) {
    FOR(i, 0, N) if (!satisfied[i]) { remainCounts++; }
  } else {
    FOF(it, unsatisfiedGroup) {
      if (!satisfied[it]) {
        remainCounts++;
      }
    }
  }

  int div = min(K, N - K);
  int ans = 0;
  while (remainCounts > 1) {
    if (remainCounts >= div * 2) {
      remainCounts -= div;
    } else {
      remainCounts = (remainCounts + 1) / 2;
    }
    ans++;
  }

  cout << ans << endl;
}